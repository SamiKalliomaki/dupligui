import { app, BrowserWindow, Tray, Menu } from 'electron';

console.log('Hello world from index.ts');

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) { // eslint-disable-line global-require
  app.quit();
}

let dev = app.commandLine.hasSwitch('dev')
if (dev) {
  console.log('Running in dev mode');
  app.setName(app.getName() + '-dev')
}

const singleInstanceLock = app.requestSingleInstanceLock()
if (!singleInstanceLock) {
  app.quit()
}

console.log('App starting');

import path from 'path';

import './ipc/directories';
import './ipc/directoryConfig';
import './ipc/appConfig';

declare global {
  var tray: Tray | null;
  var mainWindow: BrowserWindow | null;
}
global.tray = null;
global.mainWindow = null;

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const kAppIcon = path.join(
  app.getAppPath(),
  process.platform === 'win32' ?
    '.webpack/third_party/material_icons/cloud_circle.ico' :
    '.webpack/third_party/material_icons/cloud_circle.png');

const createTray = (): void => {
  if (global.tray != null)
    return;

  let tray = new Tray(kAppIcon);
  const contextMenu = Menu.buildFromTemplate([
    {
      label: 'Open',
      click: () => {
        createWindow();
      }
    },
    {
      label: 'Quit',
      click: () => {
        app.quit();
      }
    },
  ]);
  tray.setToolTip('Dupligui');
  tray.setContextMenu(contextMenu);
  tray.on('click', () => {
    createWindow();
  })

  global.tray = tray;
}

const createWindow = (): void => {
  if (mainWindow != null) {
    if (mainWindow.isMinimized()) mainWindow.restore()
    mainWindow.focus();
    return;
  }

  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    icon: kAppIcon,
    autoHideMenuBar: true,
  });

  console.log('Main entry: ' + MAIN_WINDOW_WEBPACK_ENTRY);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  mainWindow.on('close', () => {
    mainWindow = null;
  });

  // Open the DevTools.
  if (dev) {
    mainWindow.webContents.openDevTools();
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  createTray();
  if (dev) {
    createWindow();
  }
});

// Prevent quitting automatically.
app.on('window-all-closed', (e: Event) => {
  e.preventDefault();
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

app.on('second-instance', (event, commandLine, workingDirectory) => {
  createWindow();
});